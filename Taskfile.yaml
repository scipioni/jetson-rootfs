version: "3"

dotenv: [".env"]

tasks:
  default:
    cmds:
      - go-task -l
    silent: true

  build:
    #deps: [debootstrap, base]
    desc: "build image"
    cmds:
      - task: debootstrap:tar
      - task: debootstrap
      - task: base
      - task: packages:base
      - task: packages:docker

  clean:
    cmds:
      - sudo rm -fR ${ROOTFS}

  debootstrap:tar:
    cmds:
      - |
        #mkdir -p $RUNTIME
        #echo $TAR
        debootstrap \
        --verbose \
        --no-check-gpg \
        --make-tarball=$TAR \
        --arch=${ARCH} \
        ${RELEASE} \
        ${ROOTFS} \
        ${REPO}
    status:
      - test -f $TAR

  debootstrap:
    preconditions:
      - test -f ${TAR}
    cmds:
      - |
        sudo debootstrap \
          --verbose \
          --foreign \
          --no-check-gpg \
          --unpack-tarball=${TAR} \
          --arch=${ARCH} \
          ${RELEASE} \
          ${ROOTFS} \
          ${REPO}
        sudo install -Dm755 /usr/bin/qemu-aarch64-static ${ROOTFS}/usr/bin/qemu-aarch64-static
        sudo chroot ${ROOTFS} /debootstrap/debootstrap --second-stage
    status:
      - test -f $ROOTFS/etc/hostname

  cli:
    cmds:
      - |
        sudo arch-chroot $ROOTFS bash --login

  cli:orin:
    cmds:
      - |
        sudo arch-chroot runtime/orin-os bash --login

  base:
    cmds:
      - |
        sudo rsync -rv overlay/ $ROOTFS/
        sudo arch-chroot $ROOTFS bash --login <<EOF
          apt update
          apt -y upgrade
          apt -y install locales psmisc htop usbutils wget curl vim jq
          #/usr/sbin/locale-gen
          systemctl enable systemd-networkd.service
        EOF

  packages:base:
    cmds:
      - |
        sudo arch-chroot $ROOTFS bash --login <<EOF
          mkdir -p /opt/nvidia/l4t-packages/
          touch /opt/nvidia/l4t-packages/.nv-l4t-disable-boot-fw-update-in-preinstall
          apt -f install nvidia-l4t-core

          apt-get install --no-install-recommends -y \
            git \
            mtd-utils \
            parted \
            openssh-server \
            jetson-gpio-common \
            python-jetson-gpio \
            python3-jetson-gpio \
            nvidia-l4t-3d-core \
            nvidia-l4t-camera \
            nvidia-l4t-configs \
            nvidia-l4t-cuda \
            nvidia-l4t-firmware \
            nvidia-l4t-gbm \
            nvidia-l4t-gputools \
            nvidia-l4t-graphics-demos \
            nvidia-l4t-gstreamer \
            nvidia-l4t-init \
            nvidia-l4t-initrd \
            nvidia-l4t-jetson-io \
            nvidia-l4t-jetsonpower-gui-tools \
            nvidia-l4t-libvulkan \
            nvidia-l4t-multimedia-utils \
            nvidia-l4t-multimedia \
            nvidia-l4t-nvfancontrol \
            nvidia-l4t-nvpmodel-gui-tools \
            nvidia-l4t-nvpmodel \
            nvidia-l4t-nvsci \
            nvidia-l4t-oem-config \
            nvidia-l4t-openwfd \
            nvidia-l4t-optee \
            nvidia-l4t-pva \
            nvidia-l4t-tools \
            nvidia-l4t-vulkan-sc-dev \
            nvidia-l4t-vulkan-sc-samples \
            nvidia-l4t-vulkan-sc-sdk \
            nvidia-l4t-vulkan-sc \
            nvidia-l4t-wayland \
            nvidia-l4t-weston \
            nvidia-l4t-x11 \
            nvidia-l4t-xusb-firmware \
            nvidia-l4t-display-kernel \
            nvidia-l4t-kernel-dtbs \
            nvidia-l4t-kernel-headers \
            nvidia-l4t-kernel \
            nvidia-l4t-bootloader
        EOF

        sudo du $ROOTFS -hs

  packages:docker:
    desc: "install docker as https://docs.docker.com/engine/install/ubuntu/"
    cmds:
      - |
        sudo arch-chroot $ROOTFS bash --login <<EOF
          apt-get install --no-install-recommends -y \
            ca-certificates \
            gnupg
          
          mkdir -m 0755 -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch="arm64" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu focal stable" > /etc/apt/sources.list.d/docker.list
          apt-get update
          apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          apt-get install -y nvidia-container
          # TODO usermod -aG docker ubuntu
          #cat /etc/docker/daemon.json | jq '. += { "insecure-registries":["http://docker.csgalileo.org:5000"] }' | tee /etc/docker/daemon.json
        EOF

  opencv:
    cmds:
      - |
        sudo arch-chroot $ROOTFS bash --login <<EOF
          apt-get install --no-install-recommends -y \
            cuda \
            nvidia-cudnn8-dev \
            cmake \
            build-essential \
            libgtk2.0-dev \
            pkg-config \
            libavcodec-dev \
            libavformat-dev \
            libswscale-dev \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            python3.8-dev \
            python-dev \
            python-numpy \
            python3-numpy \
            libtbb2 \
            libtbb-dev \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libdc1394-22-dev \
            libv4l-dev \
            v4l-utils \
            qv4l2
          /scripts/jetson-opencv4-build.sh
        EOF

  optimize:
    cmds:
      - |
        sudo du $ROOTFS -hs
          sudo arch-chroot $ROOTFS <<EOF
          apt autoremove
          apt autoclean
          apt clean
        EOF
        sudo du $ROOTFS -hs

  sync:
    cmds:
      - |
        cd $RUNTIME
        sudo tar --exclude rootfs/usr/local/src/opencv -c rootfs | nc 192.168.122.18 1234

  flash:
    deps: [usb, os:flash]

  usb:
    cmds:
      - sudo virsh attach-device sdk --file flash/usb1.xml --current
      - sleep 45
      - sudo virsh attach-device sdk --file flash/usb2.xml --current

  os:flash:
    cmds:
      - sleep 2
      - ssh sdk "cd jetson-os && task os:flash"
